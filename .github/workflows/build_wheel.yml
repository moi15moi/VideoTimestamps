name: Build wheel

on:
  workflow_call:

jobs:
  build-wheel:
    name: "Build wheel ${{ matrix.py_build }} ${{ matrix.arch }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13, windows-latest, windows-11-arm]
        arch: [auto64]
        py_build: ["cp39", "cp310", "cp311", "cp312", "cp313"]
        include:
          - os: ubuntu-24.04-arm
            arch: aarch64
            py_build: "cp39"
          - os: ubuntu-24.04-arm
            arch: aarch64
            py_build: "cp310"
          - os: ubuntu-24.04-arm
            arch: aarch64
            py_build: "cp311"
          - os: ubuntu-24.04-arm
            arch: aarch64
            py_build: "cp312"
          - os: ubuntu-24.04-arm
            arch: aarch64
            py_build: "cp313"
          # Add a single one to mark it as sdist builder
          - os: macos-latest
            arch: auto64
            py_build: "cp313"
            sdist: true

    defaults:
      run:
        shell: ${{ (matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm') && 'msys2 {0}' || 'bash' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install platform-specific requirements X64 (Windows)
      if: runner.os == 'Windows' && runner.arch == 'X64'
      uses: msys2/setup-msys2@v2
      with:
        msystem: CLANG64
        path-type: inherit
        install: >-
          mingw-w64-clang-x86_64-autotools
          mingw-w64-clang-x86_64-toolchain
          mingw-w64-clang-x86_64-nasm

    - name: Install platform-specific requirements ARM64 (Windows)
      if: runner.os == 'Windows' && runner.arch == 'ARM64'
      uses: msys2/setup-msys2@v2
      with:
        msystem: CLANGARM64
        path-type: inherit
        install: >-
          mingw-w64-clang-aarch64-autotools
          mingw-w64-clang-aarch64-toolchain
          mingw-w64-clang-aarch64-nasm

    - name: Install platform-specific requirements (macOS)
      if: runner.os == 'macOS'
      run: brew install autoconf automake libtool nasm

    - name: Run cibuildwheel
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          export CIBW_ENVIRONMENT="PKG_CONFIG_PATH='/project/build_dependencies/usr/local/lib/pkgconfig'"
        else
          PKG_CONFIG_PATH="$(pwd)/build_dependencies/usr/local/lib/pkgconfig"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
              PKG_CONFIG_PATH=$(cygpath -w "$(pwd)/build_dependencies/usr/local/lib/pkgconfig")
          fi
          export CIBW_ENVIRONMENT="PKG_CONFIG_PATH='$PKG_CONFIG_PATH' MACOSX_DEPLOYMENT_TARGET='10.15'"
        fi
        pip install cibuildwheel delvewheel
        cibuildwheel --output-dir dist
      env:
        CIBW_ARCHS: ${{ matrix.arch }}
        CIBW_BUILD: "${{ matrix.py_build }}-*"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair -w {dest_dir} {wheel}
        CIBW_BEFORE_ALL_LINUX: |
          if command -v yum >/dev/null 2>&1; then
            yum install -y wget nasm meson
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache wget nasm meson
          else
            echo "No supported package manager found" >&2
            exit 1
          fi
          ./build_dependencies.sh
        CIBW_BEFORE_ALL_WINDOWS: pip install meson && bash build_dependencies.sh
        CIBW_BEFORE_ALL: |
          pip install meson
          ./build_dependencies.sh
        MSYS2_ENV_CONV_EXCL: "*"

    - name: Build sdist
      if: matrix.sdist == true
      run: |
        export PKG_CONFIG_PATH="$(pwd)/build_dependencies/usr/local/lib/pkgconfig"
        pip install build
        python -m build --sdist

    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.py_build }}
        path: dist
