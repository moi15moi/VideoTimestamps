name: Run Tests

on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  run-tests:
    name: "Test (${{matrix.os}}, Python ${{ matrix.python-version }})"
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python requirements
      run: pip install --upgrade --upgrade-strategy eager .[dev]

    - name: Install platform-specific requirements (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install ffmpeg

    - name: Install platform-specific requirements (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ffmpeg

    - name: Install platform-specific requirements (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg --no-progress --yes

    - name: Download ffmpeg build
      if: runner.os == 'Windows'
      run: curl -L -o ffmpeg.7z https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-essentials.7z

    - name: Extract ffmpeg
      if: runner.os == 'Windows'
      run: 7z x ffmpeg.7z -o"${{ github.workspace }}\ffmpeg" -y

    - name: Locate ffprobe
      id: ffprobe_path
      if: runner.os == 'Windows'
      run: |
        $ffprobe = Get-ChildItem -Recurse "${{ github.workspace }}\ffmpeg" -Filter ffprobe.exe | Select-Object -First 1
        echo "path=$($ffprobe.FullName)" >> "$env:GITHUB_OUTPUT"

    - name: Run tests
      env:
        CUSTOM_FFPROBE_PATH: ${{ runner.os == 'Windows' && steps.ffprobe_path.outputs.path || '' }}
      run: pytest

    - name: Typecheck with mypy
      run: |
        mypy

    - name: Check code with ruff
      run: |
        ruff check

    - name: Generate coverage report
      env:
        CUSTOM_FFPROBE_PATH: ${{ runner.os == 'Windows' && steps.ffprobe_path.outputs.path || '' }}
      run: |
        coverage run -m pytest
        coverage xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
